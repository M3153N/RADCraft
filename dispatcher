#!/usr/bin/env python3

import subprocess
import sys
import argparse
import os
from urllib.request import urlopen

# Configuración predeterminada del repositorio
DREPO = "M3153N/Dispatcher"
VERSION = "1.0.0"

# Definimos los colores
RESET = "\033[0m"
BOLD = "\033[1m"
ORANGE = "\033[38;5;214m"
GREEN = "\033[38;5;46m"
RED = "\033[38;5;196m"
YELLOW = "\033[38;5;226m"
CYAN = "\033[38;5;51m"
WHITE = "\033[37m"
BLUE = "\033[38;5;33m"

def print_logo():
    logo = r"""
 ____  _                 _       _               
|  _ \(_)___ _ __   __ _| |_ ___| |__   ___ _ __ 
| | | | / __| '_ \ / _` | __/ __| '_ \ / _ \ '__|
| |_| | \__ \ |_) | (_| | || (__| | | |  __/ |   
|____/|_|___/ .__/ \__,_|\__\___|_| |_|\___|_|   
            |_|         By BASE4 Security.                         
    """
    print(f"{ORANGE}{logo}{RESET}")

if os.geteuid() == 0:
    print_logo()
    print(f"""{RED}{BOLD}
[ADVERTENCIA] No ejecutes este script con 'sudo'.
Hacerlo podría romper algunos scripts.
Ejecuta el script como usuario normal y usa tu contraseña cuando se solicite.
{RESET}""")
    sys.exit(1)

def run_command(command, verbose=False, realtime=False, output_file=None):
    if verbose:
        print(f"{YELLOW}{BOLD}{command}{RESET}")
    process = subprocess.Popen(command, shell=True, text=True,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    with open(output_file, "a") if output_file else open(os.devnull, "w") as f:
        if realtime:
            for line in process.stdout:
                print(line, end="")
                if output_file:
                    f.write(line)
            for line in process.stderr:
                print(line, end="", file=sys.stderr)
                if output_file:
                    f.write(line)
        else:
            stdout, stderr = process.communicate()
            if output_file:
                f.write(stdout)
                f.write(stderr)

    return process

def get_programs_list(repo, filename):
    if not repo:
        repo = DREPO
    url = f"https://raw.githubusercontent.com/{repo}/main/{filename}"
    try:
        with urlopen(url) as response:
            content = response.read().decode('utf-8').strip()
            programs = [line.strip() for line in content.split('\n')]
            return programs
    except Exception as e:
        print(f"{RED}Error: No se pudo obtener la lista de programas desde {url}: {e}{RESET}")
        return []

def main_execute(list_name, verbose=False, output_file=None):
    comandos = get_programs_list(DREPO, list_name)
    print(f"{CYAN}Ejecutando los comandos de la lista '{list_name}'...{RESET}\n")
    for cmd in comandos:
        cmd = cmd.strip()
        if cmd.startswith("#"):
            print(f"{ORANGE}{BOLD}{cmd}{RESET}")
        elif cmd:
            run_command(cmd, verbose=verbose, realtime=True, output_file=output_file)

def main_execute_simple(list_name, output_file=None):
    comandos = get_programs_list(DREPO, list_name)
    print(f"{CYAN}Ejecutando los comandos de la lista '{list_name}'...{RESET}\n")
    for cmd in comandos:
        cmd = cmd.strip()
        if cmd.startswith("#"):
            print(f"{ORANGE}{BOLD}{cmd}{RESET}")
        elif cmd:
            run_command(cmd, output_file=output_file)

def main_read(list_name):
    programas = get_programs_list(DREPO, list_name)
    if programas:
        print(f"\n{WHITE}{BOLD}{list_name}:\n{RESET}")
        print("\n".join(programas))
    else:
        print(f"{RED}Error: La lista '{list_name}' no se encontró ni localmente ni en el repositorio.{RESET}")

def parse_args():
    parser = argparse.ArgumentParser(
        description="Dispatcher - Herramienta para gestionar listas y ejecutar comandos.",
        formatter_class=argparse.RawTextHelpFormatter
    )

    parser.add_argument('-xv', '--execute-verbose', type=str,
                        help="Ejecutar lista de comandos con detalles en tiempo real.")
    parser.add_argument('-x', '--execute', type=str,
                        help="Ejecutar lista de comandos de forma resumida (solo título).")
    parser.add_argument('-r', '--read', type=str,
                        help="Leer lista específica o usa index para ver un resumen de las listas alojadas en el repositorio.")
    parser.add_argument('-o', '--output', type=str,
                        help="Guardar salida completa en un archivo dentro de /tmp.")
    parser.add_argument('-v', '--version', action='store_true',
                        help="Mostrar la versión del programa.")

    return parser.parse_args()

def handle_flags(args):
    if args.version:
        print(f"{GREEN}Dispatcher versión {VERSION}{RESET}")
        sys.exit(0)

    print_logo()
    output_path = f"/tmp/{args.output}" if args.output else None

    if args.execute_verbose:
        main_execute(args.execute_verbose, verbose=True, output_file=output_path)
    elif args.execute:
        main_execute_simple(args.execute, output_file=output_path)
    elif args.read:
        main_read(args.read)
    else:
        print(f"""
dispatcher -xv, --execute-verbose <Lista>   Ejecutar lista de comandos con detalles en tiempo real.
dispatcher -x,  --execute <Lista>           Ejecutar lista de comandos de forma resumida (solo título).
dispatcher -r,  --read <Lista>              Leer lista específica o un resumen de las listas alojadas en el repositorio.
dispatcher -x/-xv ... -o, --output <archivo> Guardar salida completa en /tmp/<archivo>
dispatcher -v,  --version                   Mostrar la versión del programa.
""")

if __name__ == "__main__":
    args = parse_args()
    handle_flags(args)
